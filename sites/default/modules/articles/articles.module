<?php

/**
 * Implements hook_menu_alter().
 */
function articles_menu_alter(&$items) {
	if (!empty($items['taxonomy/term/%taxonomy_term'])) {
		$items['taxonomy/term/%taxonomy_term']['page callback'] = 'articles_term_page';
		$items['taxonomy/term/%taxonomy_term']['file path'] = drupal_get_path('module', 'articles');
		$items['taxonomy/term/%taxonomy_term']['file'] = 'articles.pages.inc';
	}
	if (!empty($items['taxonomy/term/%taxonomy_term/feed'])) {
		unset($items['taxonomy/term/%taxonomy_term/feed']);
	}
}

/**
* Implements hook_block_info().
*/
function articles_block_info() {
	
	$blocks = array(
		'main_footer' => array(
			'info' => t('Main website footer'),
			'cache' => DRUPAL_CACHE_GLOBAL,
		),
		'rubric_sections' => array(
			'info' => t('Rubriche - sezioni'),
			'cache' => DRUPAL_CACHE_GLOBAL,
		),
	);

	return $blocks;
}

/**
* Implements hook_block_view().
*/
function articles_block_view($block_name = '') {
	$block = array();
	
	switch ($block_name) {
		case 'main_footer':
			$block = array(
				'subject' => NULL,
				'content' => theme('main_footer'),
			);		
		break;
		
		case 'rubric_sections':
			$vid = 4; // rubric vocabulary
			
			
			$query = db_select('taxonomy_term_data', 't');
			$query->fields('t', array('tid', 'name'));
			$query->condition('vid', $vid);
			$query->orderBy('name', 'ASC');
			$sections = $query->execute()->fetchAllKeyed();

			$items = array();
			foreach ($sections as $tid => $title)
				$items[] = l($title, 'taxonomy/term/'.$tid, array('attributes' => array('title'=>$title)));

			$block = array(
				'subject' => t('Rubriche'),
				'content' => theme('item_list', array('items' => $items)),
			);
		break;
	}

	return $block;
}

function articles_theme($existing, $type, $theme, $path) {
	return array(
		'main_footer' => array(
			'variables' => array(),
			'template' => 'main-footer',
		),
	);
}

/**
 * Implements hook_node_view_alter().
 */
function articles_node_view_alter(&$build) {
	if ($build['#node']->type == 'article') {
		switch($build['#view_mode']) {
			case 'firstpage': // firstpage view
				$today = strtotime('today');
				if (!empty($build['field_location'])) {
					hide($build['field_location']);
						
					if ($build['field_location'][0]['#type'] == 'link')
						$build['field_short'][0]['#markup'] = l($build['field_location'][0]['#title'], $build['field_location'][0]['#href'], array('attributes'=>array('class'=>array('field-location')))). '<span class="red"> - </span>' .$build['field_short'][0]['#markup'];
				}

				// add the time for todays articles.
				if ($build['#node']->created > $today) {
					$build['field_short'][0]['#markup'] = '<span class="time">'.
						format_date($build['#node']->created, 'custom', 'H:i').'</span> '.
						$build['field_short'][0]['#markup'];
				}

			break;
		
			case 'full': // full page view

				// tax type
				$type_links = array();
				if (isset($build['field_type'])) {
					hide($build['field_type']);
					$tid_parents = array_reverse(taxonomy_get_parents_all($build['field_type']['#items'][0]['tid']));
					foreach ($tid_parents as $i => $term_data)
						$type_links[$term_data->tid] = l($term_data->name, 'taxonomy/term/'.$term_data->tid);
				}
				
				// tax tags
				if (isset($build['field_tags'])) {
					hide($build['field_tags']);
					$tags_links = array();
					foreach($build['field_tags']['#items'] as $item) {
						$term = $item['taxonomy_term'];
						$tags_links[$term->tid] = l($term->name, 'taxonomy/term/'.$term->tid);
					}
					$build['field_tags_custom'] = array(
						'#markup' => '<div class="box tags">'.t('tags:').' '.implode(', ',$tags_links).'</div>',
						'#weight' => $build['field_tags']['#weight'],
					);
				}

				$date = format_date($build['#node']->created, 'medium');
				$name = theme('username', array('account' => $build['#node']));
				$tax_type = implode(' / ', $type_links);

				$build['submitted']['#markup'] = '<div class="submitted"><span class="author">'.$name.' in '.$tax_type.'</span><span class="date">'.$date.'</span></div>';
				$build['submitted']['#weight'] = -10;
				
				$build['field_short']['#weight'] = -20;
				
				if (!empty($build['field_location'])) {
					hide($build['field_location']);
					
					if ($build['field_location'][0]['#type'] == 'link') {
						$dash = '<span class="red"> - </span>';
						$location = l($build['field_location'][0]['#title'], $build['field_location'][0]['#href'],
							array('attributes'=>array('class'=>array('field-location'))));
						
						$build['body'][0]['#markup'] = preg_replace('/<p>/', '<p>'.$location.$dash, $build['body'][0]['#markup'], 1);
					}
				}
			break;
		
			case 'teaser': // teaser view
				$term_name = '';
				$build['#node']->linear_view = FALSE;

				// check the taxonomy "type"
				if (!empty($build['#node']->field_type)) {
					$tid = $build['#node']->field_type['it'][0]['tid'];
					$term = taxonomy_term_load($tid);
					$term_name = strtolower($term->name);					
				}

				switch ($term_name) {
					case 'partners' :
						hide($build['field_location']);
						$build['#node']->linear_view = TRUE;

						if (!empty($build['field_media'])) {
							hide($build['field_media']);
							hide($build['field_short']);
							$title = $build['#node']->title;
							$url = url('node/'.$build['#node']->nid);
							$image_src = image_style_url('large', $build['field_media']['#items'][0]['file']->uri);

							$output = "<a href=\"$url\" title=\"$title\">
									<img src=\"$image_src\" alt=\"$title\"/>
									<h2>$title</h2></a>";

							$build['field_partners']['#markup'] = $output;
						}

					default :
						if (!empty($build['field_location'])) {
							hide($build['field_location']);
								
							if ($build['field_location'][0]['#type'] == 'link') {
								$dash = '<span class="red"> - </span>';
								$location = l($build['field_location'][0]['#title'], $build['field_location'][0]['#href'], array('attributes'=>array('class'=>array('field-location'))));
								
								$build['field_short'][0]['#markup'] = $location.$dash.$build['field_short'][0]['#markup'];
							}
						}

						$date = format_date($build['#node']->created, 'medium');
						// $name = theme('username', array('account' => $build['#node']));
						$build['submitted']['#markup'] = '<div class="submitted">'.$date.'</div>';
						$build['submitted']['#weight'] = 10;					
				}
				
				// hide the read more button.
				hide($build['links']['node']);
			break;
			
			case 'rss': // full page view
				$output = '';
				
				if (isset($build['field_media']['#items'][0])) {
					$image_src = image_style_url('thumbnail', $build['field_media']['#items'][0]['file']->uri);
					$output = '<img src="'. $image_src .'" style="float:right;margin-left:10px; margin-bottom:5px" />';
					hide($build['field_media']);
				}
				
				$output .= '<p>';
				if (isset($build['field_location'][0])) {
					$output .= $build['field_location'][0]['#markup'] . ' - ';
					hide($build['field_location']);
				}
				if (isset($build['field_short'][0]))
					$output .= $build['field_short'][0]['#markup'];
				unset($build['field_short']);
				$output .= '</p>';

				$build['field_short']['#markup'] = $output;
			break;
		}
	}
}


/**
 * Return nodes attached to a term and the descendant across all field instances.
 *
 * This function requires taxonomy module to be maintaining its own tables,
 * and will return an empty array if it is not. If using other field storage
 * methods alternatives methods for listing terms will need to be used.
 *
 * @param $tid
 *	 The term ID.
 * @param $pager
 *	 Boolean to indicate whether a pager should be used.
 * @param $limit
 *	 Integer. The maximum number of nodes to find.
 *	 Set to FALSE for no limit.
 * @param $max_depth
 *	 The number of levels of the tree to return. Leave NULL to return all levels.
 * @order
 *	 An array of fields and directions.
 *
 * @return
 *	 An array of nids matching the query.
 */
function taxonomy_select_all_nodes($tid, $pager = TRUE, $limit = FALSE, $max_depth = NULL, $order = array('t.sticky' => 'DESC', 't.created' => 'DESC')) {

	if (!variable_get('taxonomy_maintain_index_table', TRUE))
		return array();
	
	$term = taxonomy_term_load($tid);
	
	// retrieve the tree of terms
	$tree = taxonomy_get_tree($term->vid, $term->tid);
	
	// array of the descendant's tids + the actual
	$descendant_tids = array_merge(array($term->tid), array_map('_taxonomy_get_tid_from_term', $tree));	
	
	$query = db_select('taxonomy_index', 't');
	$query->addTag('node_access');
	$query->condition('t.tid', $descendant_tids, 'IN');
	if ($pager) {
		$count_query = clone $query;
		$count_query->addExpression('COUNT(t.nid)');

		$query = $query->extend('PagerDefault');
		if ($limit !== FALSE) {
			$query = $query->limit($limit);
		}
		$query->setCountQuery($count_query);
	}
	else {
		if ($limit !== FALSE) {
			$query->range(0, $limit);
		}
	}
	$query->addField('t', 'nid');
	$query->addField('t', 'tid');
	foreach ($order as $field => $direction) {
		$query->orderBy($field, $direction);
		// ORDER BY fields need to be loaded too, assume they are in the form
		// table_alias.name
		list($table_alias, $name) = explode('.', $field);
		$query->addField($table_alias, $name);
	}
	return $query->execute()->fetchCol();
}

