<?php
/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implementation of hook_menu().
 */
function migrate_menu() {
	$items = array();

	$items['admin/content/custom-import'] = array(
		'title' => 'Custom import',
		'description' => 'Run custom import routines to migrate from one Drupal version to another.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('migrate_form'),
		'access arguments' => array('administer site configuration'),
	);

	return $items;
}

function migrate_form() {
	drupal_set_message('Are you sure you want to run the custom import script?	No going back without re-installing the database!!!', 'warning');
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Start import'),
	);

	return $form;
}

function migrate_form_submit($form, &$form_state) {
	$batch = array(
		'title' => t('Importing data'),
		'operations' => migrate_batch_operations(),
		'finished' => 'migrate_batch_finished',
 		'init_message' => 'Starting ...',
		'progress_message' => t('Processed @current out of @total.'),
		'error_message' => t('The batch has encountered an error.'),

	);

	batch_set($batch);
}

function migrate_batch_operations() {
	$operations = array();

	$operations[] = array('migrate_batch_nodes', array());

	return $operations;
}

function migrate_batch_finished($success, $results, $operations) {
	if ($success) {
		$message = t('Import finished successfully.');
	}
	else {
		$message = t('Finished with an error.');
	}
	drupal_set_message($message);
}

function migrate_batch_nodes(&$context) {
	db_set_active('legacy'); // Switch databases.

	// Build the total import count.
	if (empty($context['sandbox'])) {
		$query = db_select('node');
		$query->condition('type','story'); // only story nodes
		$query->addExpression('COUNT(nid)', 'count');
		$max = $query->execute()->fetchField();
		
		$context['sandbox'] = array(
			'progress' => 0,
			'current_node' => 0,
			'max' => $max,
		);
	}

	$limit = 10; // Number of nodes to process at a time.
	$query = db_select('node', 'n');
	$query->join('node_revisions', 'nr', 'nr.vid = n.vid');
	$query->orderBy('n.nid', 'asc');
	$query->fields('n');
	$query->fields('nr', array('body', 'teaser', 'format'));
	$query->condition('n.nid', $context['sandbox']['current_node'], '>');
	$query->condition('n.type', 'story');
	$query->range(0, $limit);
	$result = $query->execute();

	foreach ($result as $row) {
		$node = (object) array(
			'nid' => $row->nid,
		);

		db_set_active('legacy'); // Switch databases.

		// Migrate taxonomies.
		$query = db_select('term_node', 'tn');
		$query->join('term_data', 'td', 'tn.tid = td.tid');
		$query->fields('tn');
		$query->fields('td');
		$query->condition('tn.nid', $row->nid);
		$term_results = $query->execute();

		db_set_active('default');

		foreach ($term_results as $term) {
			$tid = db_query('SELECT tid FROM {taxonomy_term_data} WHERE name=:term_name AND vid=:voc_vid', 
			array(
				':term_name'=>$term->term_name,
				':voc_vid'=> $tax_map[$term->vid])
			)->fetchField();
			
			if ($tid == '') {
				$new_term = array(
					'name' => $term->term_name,
					'description' => '',
					'vid' => $tax_map[$term->vid],
				);
				$new_term_obj = (object) $new_term;
				taxonomy_term_save($new_term_obj);
				$tid = $new_term_obj->tid;
			}

			switch ($term->vid) {
				case 5: // old Tags.
					$node->field_tags[LANGUAGE_NONE][] = array('tid' => $tid);
				break;
			}
			
		}		

		node_save($node);
		
		$context['message'] = t('Importing node @title', array('@title' => $node->title));
		$context['sandbox']['current_node'] = $row->nid;
		$context['sandbox']['progress']++;
	}

	db_set_active('default'); // Switch back.
	
	if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
		$context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
	}
}

