<?php // $Id: superfish.module,v 1.6.2.1 2010/05/24 14:49:46 mehrpadin Exp $

/**
 * @file
 * Module to deply jQuery Superfish plugin.
 *
 * A special thanks goes to Jake Gordon (jakeg), Addison Berry (add1sun)
 * Jeff Burnz, and Lex-DRL as parts of this file are written by them.
 */

/**
 * Implements hook_menu().
 */
function superfish_menu() {
  $items['admin/settings/superfish'] = array(
    'title' => 'Superfish',
    'description' => 'Configure Superfish Menus',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('superfish_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'superfish.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function superfish_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/settings/modules#description':
    $output .= t('Superfish adds jQuery Superfish plugin to your menus.');
    break;
  case 'admin/settings/superfish':
    $output .= t('<p>Block-specific Superfish settings could be found at !link</p>', array('!link' => l('admin/structure/block', 'admin/structure/block')));
    break;
  }
  return $output;
}

/**
 * Implements hook_block_info().
 */
function superfish_block_info() {
  $number = variable_get('superfish_number', 2) + 1;
  for ($i = 1; $i <= $number; $i++) {
    $blocks[$i] = array(
      'info' => variable_get('superfish_name_' . $i, 'Superfish ' . $i) . ' (Superfish)',
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function superfish_block_configure($delta = 0) {
  $form = array();
  $form['superfish_name_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Menu Name'),
    '#default_value' => variable_get('superfish_name_' . $delta, 'Superfish ' . $delta),
  );
  $form['sf-settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Superfish settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['sf-settings']['superfish_menu_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Menu Parent'),
    '#description' => t('The menu you want to be displayed using Superfish.'),
    '#default_value' => variable_get('superfish_menu_' . $delta, 'main-menu:0'),
    '#options' => menu_parent_options(menu_get_menus(), array('mlid' => 0)),
  );
  $form['sf-settings']['superfish_depth_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Menu Depth'),
    '#description' => t('The number of child levels starting with the parent selected above. <strong>-1</strong> means all of them, <strong>0</strong> means none of them.'),
    '#default_value' => variable_get('superfish_depth_' . $delta, '-1'),
    '#options' => drupal_map_assoc(range(-1, 5)),
  );
  $form['sf-settings']['superfish_type_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Menu Type'),
    '#default_value' => variable_get('superfish_type_' . $delta, 'Horizontal'),
    '#options' => array(
    'horizontal' => t('Horizontal'),
    'vertical' => t('Vertical'),
    'navbar' => t('NavBar')),
  );
  $form['sf-settings']['superfish_style_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Style'),
    '#default_value' => variable_get('superfish_style_' . $delta, 'default'),
    '#options' => array(
    'default' => t('Default'),
    'blue' => t('Blue'),
    'coffee' => t('Coffee'),
    'light-blue' => t('Light blue'),
    'pomegranate' => t('Pomegranate'),
    'space' => t('Space [Blue]'),
    'space-orange' => t('Space [Orange]'),
    'space-teal' => t('Space [Teal]'),
    'spring' => t('Spring'),
    'white' => t('White')),
  );
  $form['sf-settings']['superfish_slide_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Slide-in effect'),
    '#default_value' => variable_get('superfish_slide_' . $delta, 'true'),
    '#options' => array(
    'true' => t('Yes'),
    'false' => t('No')),
  );
  $form['sf-settings']['superfish_delay_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Mouse delay'),
    '#description' => t('The delay in <b>milliseconds</b> that the mouse can remain outside a sub-menu without it closing. <em>(Default: 1000)</em>'),
    '#default_value' => variable_get('superfish_delay_' . $delta, 1000),
    '#size' => 10,
  );
  $form['sf-settings']['superfish_speed_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Animation Speed'),
    '#default_value' => variable_get('superfish_speed_' . $delta, 'normal'),
    '#options' => array(
    'slow' => t('Slow'),
    'normal' => t('Normal'),
    'fast' => t('Fast')),
  );
  $form['sf-settings']['superfish_shadow_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Drop shadows'),
    '#default_value' => variable_get('superfish_shadow_' . $delta, 'true'),
    '#options' => array(
    'true' => t('Yes'),
    'false' => t('No')),
  );
  $form['sf-settings']['superfish_arrow_' . $delta] = array(
    '#type' => 'select',
    '#title' => t('Auto-arrows'),
    '#description' => t('Automatically adds an arrow to each parent menu item.'),
    '#default_value' => variable_get('superfish_arrow_' . $delta, 'false'),
    '#options' => array(
    'true' => t('Yes'),
    'false' => t('No')),
  );
  $form['sf-settings']['superfish_bgf_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Use jQuery BgiFrame plugin for this menu.'),
    '#description' => t('Helps ease the pain when having to deal with IE z-index issues.'),
    '#default_value' => variable_get('superfish_bgf_' . $delta, 0),
  );
  $form['sf-settings']['sf-settings-supersubs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Supersubs options'),
    '#description' => t('<b>Supersubs</b> makes it possible to define custom widths for your menus. <em>(Not working for NavBar menus)</em>'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['sf-settings']['sf-settings-supersubs']['superfish_supersubs_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Supersubs'),
    '#default_value' => variable_get('superfish_supersubs_' . $delta, 1),
  );
  $form['sf-settings']['sf-settings-supersubs']['superfish_minwidth_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum width'),
    '#description' => t('Minimum width for sub-menus, in <b>em</b> units. <em>(Default: 12)</em>'),
    '#default_value' => variable_get('superfish_minwidth_' . $delta, '12'),
    '#size' => 20,
  );
  $form['sf-settings']['sf-settings-supersubs']['superfish_maxwidth_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum width'),
    '#description' => t('Maximum width for sub-menus, in <b>em</b> units. <em>(Default: 27)</em>'),
    '#default_value' => variable_get('superfish_maxwidth_' . $delta, '27'),
    '#size' => 20,
  );
  $form['sf-settings']['sf-settings-css'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced CSS settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['sf-settings']['sf-settings-css']['superfish_firstlast_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Add <strong>first \ middle\ last</strong> classes to menu items.'),
    '#default_value' => variable_get('superfish_firstlast_' . $delta, 1),
  );
  $form['sf-settings']['sf-settings-css']['superfish_zebra_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Add <strong>zebra striping</strong>. <em>(odd \ even)</em>'),
    '#default_value' => variable_get('superfish_zebra_' . $delta, 1),
  );
  $form['sf-settings']['sf-settings-css']['superfish_dfirstlast_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Do <strong>not</strong> add <strong>first \ middle \ last</strong> classes to single menu items.'),
    '#default_value' => variable_get('superfish_dfirstlast_' . $delta, 0),
  );
  $form['sf-settings']['sf-settings-css']['superfish_dzebra_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Do <strong>not</strong> add <strong>zebra striping</strong> to single menu items.'),
    '#default_value' => variable_get('superfish_dfirstlast_' . $delta, 0),
  );
  $form['sf-settings']['sf-settings-css']['superfish_count_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Add item count class to menu items. <em>(sf-item-1, sf-item-2, sf-item-3, ...)</em>'),
    '#default_value' => variable_get('superfish_count_' . $delta, 1),
  );
  $form['sf-settings']['sf-settings-css']['superfish_extraclass_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Extra class(es)'),
    '#description' => t('Attach extra classes to this Superfish menu. <em>(Space separated, without dots)</em><br />Example: top-menu category-science'),
    '#default_value' => variable_get('superfish_extraclass_' . $delta, ''),
    '#size' => 50,
    '#maxlength' => 1000,
  );
  $form['sf-settings']['sf-settings-css']['superfish_extracss_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Extra CSS'),
    '#description' => t('Include extra CSS file(s). <em>(Comma separate)</em><br />Example: <ul><li>sites/all/files/example.css</li><li>sites/all/files/example.css,sites/all/files/example2.css</li></ul>'),
    '#default_value' => variable_get('superfish_extracss_' . $delta, ''),
    '#size' => 100,
    '#maxlength' => 1000,
  );
  $form['sf-settings']['sf-settings-css']['superfish_linkwrapper_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Wrapper > Hyperlinks'),
    '#description' => t('Insert HTML objects <strong>before</strong> and\or <strong>after</strong> hyperlinks. <em>(Comma separated)</em><br />Examples: <ul><li>&lt;span class="background-left"&gt;&lt;span class="background-right"&gt;,&lt;/span&gt;&lt;/span&gt;</li><li>&lt;img src="example.jpg" width="24" height="24" alt="example" title="example" /&gt;,</li><li>,&lt;span class="custom-arrow"&gt;>&lt;/span&gt;</li></ul>'),
    '#default_value' => variable_get('superfish_linkwrapper_' . $delta, ''),
    '#size' => 100,
    '#maxlength' => 1000,
  );
  $form['sf-settings']['sf-settings-css']['superfish_linktextwrapper_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Wrapper > Hyperlinks text'),
    '#description' => t('Insert extra codes <strong>before</strong> and\or <strong>after</strong> the text in hyperlinks. <em>(Comma separated)</em><br />Examples: <ul><li>&lt;span class="background-left"&gt;&lt;span class="background-right"&gt;,&lt;/span&gt;&lt;/span&gt;</li><li>&lt;img src="example.jpg" width="24" height="24" alt="example" title="example" /&gt;,</li><li>,&lt;span class="custom-arrow"&gt;>&lt;/span&gt;</li></ul>'),
    '#default_value' => variable_get('superfish_linktextwrapper_' . $delta, ''),
    '#size' => 100,
    '#maxlength' => 1000,
  );
  $form['sf-settings']['sf-settings-css']['superfish_mulwrapper_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Wrapper > Main UL'),
    '#description' => t('Insert extra codes <strong>before</strong> and\or <strong>after</strong> the main UL. <em>(Comma separated)</em>.<br />Examples: <ul><li>&lt;h3&gt;Discover the universe!&lt;/h3&gt;,</li><li>&lt;h3&gt;Hello there!&lt;/h3&gt;,&lt;div style="clear:both"&gt;&lt;/div&gt;</li><li>,&lt;div style="clear:both"&gt;&lt;/div&gt;</li></ul>'),
    '#default_value' => variable_get('superfish_mulwrapper_' . $delta, ''),
    '#size' => 100,
    '#maxlength' => 1000,
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function superfish_block_save($delta = 0, $edit = array()) {
  variable_set('superfish_name_' . $delta, $edit['superfish_name_' . $delta]);
  variable_set('superfish_menu_' . $delta, $edit['superfish_menu_' . $delta]);
  variable_set('superfish_depth_' . $delta, $edit['superfish_depth_' . $delta]);
  variable_set('superfish_type_' . $delta, $edit['superfish_type_' . $delta]);
  variable_set('superfish_style_' . $delta, $edit['superfish_style_' . $delta]);
  variable_set('superfish_slide_' . $delta, $edit['superfish_slide_' . $delta]);
  variable_set('superfish_delay_' . $delta, $edit['superfish_delay_' . $delta]);
  variable_set('superfish_speed_' . $delta, $edit['superfish_speed_' . $delta]);
  variable_set('superfish_shadow_' . $delta, $edit['superfish_shadow_' . $delta]);
  variable_set('superfish_arrow_' . $delta, $edit['superfish_arrow_' . $delta]);
  variable_set('superfish_bgf_' . $delta, $edit['superfish_bgf_' . $delta]);
  variable_set('superfish_supersubs_' . $delta, $edit['superfish_supersubs_' . $delta]);
  variable_set('superfish_minwidth_' . $delta, $edit['superfish_minwidth_' . $delta]);
  variable_set('superfish_maxwidth_' . $delta, $edit['superfish_maxwidth_' . $delta]);
  variable_set('superfish_firstlast_' . $delta, $edit['superfish_firstlast_' . $delta]);
  variable_set('superfish_zebra_' . $delta, $edit['superfish_zebra_' . $delta]);
  variable_set('superfish_dfirstlast_' . $delta, $edit['superfish_dfirstlast_' . $delta]);
  variable_set('superfish_dzebra_' . $delta, $edit['superfish_dzebra_' . $delta]);
  variable_set('superfish_count_' . $delta, $edit['superfish_count_' . $delta]);
  variable_set('superfish_extraclass_' . $delta, $edit['superfish_extraclass_' . $delta]);
  variable_set('superfish_extracss_' . $delta, $edit['superfish_extracss_' . $delta]);
  variable_set('superfish_linkwrapper_' . $delta, $edit['superfish_linkwrapper_' . $delta]);
  variable_set('superfish_linktextwrapper_' . $delta, $edit['superfish_linktextwrapper_' . $delta]);
  variable_set('superfish_mulwrapper_' . $delta, $edit['superfish_mulwrapper_' . $delta]);
  return;
}

/**
 * Implements hook_block_contents().
 */
function superfish_contents($delta = 0) {
  global $language;

  list($menu_name, $mlid) = explode(':', variable_get('superfish_menu_' . $delta, 'main-menu:0'));

  $depth = variable_get('superfish_depth_' . $delta, '-1');
  $type = variable_get('superfish_type_' . $delta, 'horizontal');
  $style = variable_get('superfish_style_' . $delta, 'default');
  $slide = variable_get('superfish_slide_' . $delta, 'true');
  $delay = variable_get('superfish_delay_' . $delta, 1000);
  $speed = variable_get('superfish_speed_' . $delta, 'normal');
  $shadow = variable_get('superfish_shadow_' . $delta, 'true');
  $arrow = variable_get('superfish_arrow_' . $delta, 'false');
  $bgiframe = variable_get('superfish_bgf_' . $delta, 0);
  $supersubs = variable_get('superfish_supersubs_' . $delta, 1);
  $firstlast = variable_get('superfish_firstlast_' . $delta, 1);
  $zebra = variable_get('superfish_zebra_' . $delta, 1);
  $dfirstlast = variable_get('superfish_dfirstlast_' . $delta, 0);
  $dzebra = variable_get('superfish_dzebra_' . $delta, 0);
  $count = variable_get('superfish_count_' . $delta, 1);
  $extraclass = variable_get('superfish_extraclass_' . $delta, '');
  $extracss = variable_get('superfish_extracss_' . $delta, '');
  $linkwrapper = variable_get('superfish_linkwrapper_' . $delta, '');
  $linktextwrapper = variable_get('superfish_linktextwrapper_' . $delta, '');
  $mulwrapper = variable_get('superfish_mulwrapper_' . $delta, '');

  $pathclass = ($type == 'navbar') ? "\n pathClass: 'active-trail'," : '';

  if ($style != 'default') {
    drupal_add_css(drupal_get_path('module', 'superfish') . '/css/extra/' . $style . ' .css');
  }

  $animation = ($slide == 'true') ? "animation: {opacity:'show',height:'show'}," : '';

  $bgiframe = ($bgiframe == 1) ? ".find('ul').bgIframe({opacity:false});" : '';

  // Supersubs enabled? get the max\min widths and prepare the Javascript code \ Of course if not a 'NavBar'
  $supersubs_javascript = '';
  if ($supersubs == 1 && $type != 'navbar') {
    $minwidth = variable_get('superfish_minwidth_' . $delta, '12');
    $maxwidth = variable_get('superfish_maxwidth_' . $delta, '27');
    $supersubs_javascript = ".supersubs({ minWidth: " . $minwidth . ", maxWidth: " . $maxwidth . ", extraWidth: 1})";
  }

  $type = ($language->direction == 1) ? $type . ' rtl' : $type;
  $type = ($extraclass) ? $type . ' ' . $extraclass : $type;

  if ($output = theme('superfish', array('id' => $delta, 'menu_name' => $menu_name, 'mlid' => $mlid, 'depth' => $depth, 'type' => $type, 'style' => $style, 'firstlast' => $firstlast, 'zebra' => $zebra, 'dfirstlast' => $dfirstlast, 'dzebra' => $dzebra, 'count' => $count, 'linkwrapper' => $linkwrapper, 'linktextwrapper' => $linktextwrapper, 'mulwrapper' => $mulwrapper))) {

    if ($extracss) {
      if (strpos($extracss, ',')) {
        $extracss = explode(',', $extracss);
        foreach ($extracss as $c) {
          drupal_add_css($c);
        }
      }
      else {
        drupal_add_css($extracss);
      }
    }

    // And finally assembling our js code
    $javascript = "jQuery(document).ready(function(){jQuery('ul#superfish-" . $delta . "')" . $supersubs_javascript . ".superfish({" . $pathclass . " delay: " . $delay . "," . $animation . " speed: '" . $speed . "', autoArrows: " . $arrow . ", dropShadows: " . $shadow . "})" . $bgiframe . "});";

    drupal_add_js($javascript, array('type' => 'inline', 'weight' => 100));
  }
  return $output;
}

/**
 * Implements hook_block_view().
 */
function superfish_block_view($delta = 0) {
  $block = superfish_contents($delta);
  return $block;
}

/**
 * Implements hook_init().
 */
function superfish_init() {
  if (variable_get('superfish_hid', 1) == 1) {
    drupal_add_js(drupal_get_path('module', 'superfish') . '/js/jquery.hoverIntent.minified.js');
  }
  drupal_add_js(drupal_get_path('module', 'superfish') . '/js/jquery.bgiframe.min.js');
  drupal_add_js(drupal_get_path('module', 'superfish') . '/js/superfish.js');
  drupal_add_js(drupal_get_path('module', 'superfish') . '/js/supersubs.js');

  // Adding CSS
  drupal_add_css(drupal_get_path('module', 'superfish') . '/css/superfish.css');
  drupal_add_css(drupal_get_path('module', 'superfish') . '/css/superfish-vertical.css');
  drupal_add_css(drupal_get_path('module', 'superfish') . '/css/superfish-navbar.css');
}

/**
 * Implements hook_theme().
 */
function superfish_theme() {
  $theme = array(
    'superfish_tree' => array(
      'variables' => array('id' => NULL, 'menu_name' => NULL, 'mlid' => NULL, 'depth' => '-1', 'firstlast' => NULL, 'zebra' => NULL, 'dfirstlast' => NULL, 'dzebra' => NULL, 'count' => NULL, 'linkwrapper' => NULL, 'linktextwrapper' => NULL),
    ),
    'superfish_build' => array(
      'variables' => array('id' => NULL, 'menu' => NULL, 'depth' => '-1', 'trail' => NULL, 'firstlast' => NULL, 'zebra' => NULL, 'dfirstlast' => NULL, 'dzebra' => NULL, 'count' => NULL, 'linkwrapper' => NULL, 'linktextwrapper' => NULL),
    ),
    'superfish' => array(
      'variables' => array('id' => NULL, 'menu_name' => NULL, 'mlid' => NULL, 'depth' => '-1', 'type' => 'horizontal', 'style' => 'Blue', 'firstlast' => NULL, 'zebra' => NULL, 'dfirstlast' => NULL, 'dzebra' => NULL, 'count' => NULL, 'linkwrapper' => NULL, 'linktextwrapper' => NULL, 'mulwrapper' => NULL),
    )
  );
  return $theme;
}

/**
 * Builds the active trail from the page's menu data.
 */
function superfish_build_page_trail($page_menu) {
  $trail = array();
  foreach ($page_menu as $item) {
    if ($item['link']['in_active_trail']) {
      $trail[] = $item['link']['mlid'];
    }
    if ($item['below']) {
      $trail = array_merge($trail, superfish_build_page_trail($item['below']));
    }
  }
  return $trail;
}

/**
 * Builds the final Superfish.
 */
function theme_superfish_tree($variables) {
  $menu_name = $variables['menu_name'];
  $mlid = $variables['mlid'];
  $depth = $variables['depth'];
  $menu = menu_tree_all_data($menu_name);
  $trail = superfish_build_page_trail(menu_tree_page_data($menu_name));

  if (module_exists('i18nmenu')) {
    i18nmenu_localize_tree($menu);
  }

  // For custom $menus and menus built all the way from the top-level we
  // don't need to "create" the specific sub-menu and we need to get the title
  // from the $menu_name since there is no "parent item" array.

  // Create the specific menu if we have a mlid.
  if (!empty($mlid)) {
    // Load the parent menu item.
    $item = menu_link_load($mlid);
    $title = check_plain($item['title']);
    $parent_depth = $item['depth'];

    // Narrow down the full menu to the specific sub-tree we need.
    for ($p = 1; $p < 10; $p++) {
      if ($sub_mlid = $item["p$p"]) {
        $subitem = menu_link_load($sub_mlid);
        $menu = $menu[(50000 + $subitem['weight']) . ' ' . $subitem['title'] . ' ' . $subitem['mlid']]['below'];
      }
    }
    // Set the total menu depth counting from this parent if we need it.
    $depth =  ($depth > 0) ? $parent_depth + $depth : $depth;
  }
  else {
    // Otherwise just set a title and move on.
    // Get the title from the DB since we don't have it in the $menu.
    $result = db_query("SELECT title FROM {menu_custom} WHERE menu_name = :a", array(':a' => $menu_name))->fetchfield();
    $title = check_plain($result);
  }
  $output['subject'] = $title;
  $output['content'] = theme('superfish_build', array('id' => $variables['id'], 'menu' => $menu, 'depth' => $depth, 'trail' => $trail, 'firstlast' => $variables['firstlast'], 'zebra' => $variables['zebra'], 'dfirstlast' => $variables['dfirstlast'], 'dzebra' => $variables['dzebra'], 'count' => $variables['count'], 'linkwrapper' => $variables['linkwrapper'], 'linktextwrapper' => $variables['linktextwrapper']));
  return $output;
}

/**
 * Helper function that builds the nested lists of a Superfish menu.
 */
function theme_superfish_build($variables) {
  $output = '';
  $lw = array();
  $num_items = 0;
  $i = 1;
  $id = $variables['id'];
  $menu = $variables['menu'];
  $trail = $variables['trail'];
  $depth = $variables['depth'];
  $firstlast = $variables['firstlast'];
  $zebra = $variables['zebra'];
  $dfirstlast = $variables['dfirstlast'];
  $dzebra = $variables['dzebra'];
  $count = $variables['count'];
  $linkwrapper = $variables['linkwrapper'];
  $linktextwrapper = $variables['linktextwrapper'];

  // How many items?
  foreach ($menu as $menu_item) {
    $num_items = ($menu_item['link']['hidden'] == 0) ? $num_items + 1 : $num_items;
  }

  foreach ($menu as $menu_item) {
    if ($menu_item['link']['hidden'] == 0) {
      $class = array();
      $mlid = $menu_item['link']['mlid'];
      $class[] = ($trail && in_array($mlid, $trail)) ? 'active-trail' : '';

      // If enabaled, no single menu item gets first\last classes
      $firstlast = ($dfirstlast == 1 && $num_items == 1) ? 0 : '';

      // Adding first\middle\last classes
      if ($firstlast == 1) {
        switch ($i) {
          case ($i == 1) :
            $class[] = 'first';
            break;
          case ($i == $num_items) :
            $class[] = 'last';
            break;
          default :
            $class[] = 'middle';
        }
      }

      // If enabled, no single menu item gets zebra striping
      $zebra = ($dzebra == 1 && $num_items == 1) ? 0 : '';

      // Adding zebra striping
      $class[] = ($zebra == 1) ? ($i % 2) ? 'odd' : 'even' : '';

      // Adding item count class
      $class[] = ($count == 1) ? 'sf-item-' . $i : '';
      $i++;

      $class = implode(' ', $class);

      // Wrapper for menu link
      if (!empty($linkwrapper) && strpos($linkwrapper, ',') !== FALSE) {
        $lw = explode(',', $linkwrapper);

      // In case you just wanted to add something after the element.
        if (drupal_substr($linkwrapper, 0) == ',') {
          array_unshift($lw, '');
        }
      }

      // Wrapper for menu link text
      if (!empty($linktextwrapper) && strpos($linktextwrapper, ',') !== FALSE) {
        $ltw = explode(',', $linktextwrapper);

      // The same as above
        if (drupal_substr($linktextwrapper, 0) == ',') {
          array_unshift($ltw, '');
        }
        $menu_item['link']['title'] = $ltw[0] . check_plain($menu_item['link']['title']) . $ltw[1];
        $menu_item['link']['localized_options']['html'] = TRUE;
      }

      $menu_link = l($menu_item['link']['title'], $menu_item['link']['href'], $menu_item['link']['localized_options']);

      if ((!empty($menu_item['link']['has_children'])) && (!empty($menu_item['below'])) && $depth != 0) {
        $children = theme('superfish_build', array('id' => $id, 'menu' => $menu_item['below'], 'depth' => $depth, 'trail' => $trail, 'firstlast' => $firstlast, 'zebra' => $zebra, 'dfirstlast' => $dfirstlast, 'dzebra' => $dzebra, 'count' => $count, 'linkwrapper' => $variables['linkwrapper'], 'linktextwrapper' => $variables['linktextwrapper']));

        // To avoid a useless blank space
        if ($children) {
          $class = ($class) ? $class . ' menuparent' : 'menuparent';
        }

        $output .= '<li id="menu-' . $mlid . '-' . $id . '"';
        $output .= ($class) ? ' class="' . $class . '"' : '';
        $output .= '>';
        $output .= (!empty($lw)) ? $lw[0] . $menu_link . $lw[1] : $menu_link;
        $output .= ($children && ($menu_item['link']['depth'] <= $depth || $depth == -1)) ? "\n<ul>\n" . $children . "</ul>\n" : '';
        $output .= "</li>\n";
      }
      else {
        $output .= '<li id="menu-' . $mlid . '-' . $id . '"';
        $output .= ($class) ? ' class="' . $class . '"' : '';
        $output .= '>';
        $output .= (!empty($lw)) ? $lw[0] . $menu_link . $lw[1] : $menu_link;
        $output .= "</li>\n";
      }
    }
  }
  return $output;
}

/**
 * Theme function to allow any menu tree to be themed as a Superfish menu.
 */
function theme_superfish($variables) {
  $output = array();
  $mulw = array();
  $id = $variables['id'];
  $type = $variables['type'];
  $style = $variables['style'];
  $mulwrapper = $variables['mulwrapper'];

  if ($menu_tree = theme('superfish_tree', array('id' => $id, 'menu_name' => $variables['menu_name'], 'mlid' => $variables['mlid'], 'depth' => $variables['depth'], 'firstlast' => $variables['firstlast'], 'zebra' => $variables['zebra'], 'dfirstlast' => $variables['dfirstlast'], 'dzebra' => $variables['dzebra'], 'count' => $variables['count'], 'linkwrapper' => $variables['linkwrapper'], 'linktextwrapper' => $variables['linktextwrapper']))) {
    $output['subject'] = $menu_tree['subject'];
    $output['content'] = ' ';
    if ($menu_tree['content']) {
      $output['content'] = '<ul id="superfish-' . $id . '" class="sf-menu sf-style-' . $style . ' sf-' . $type . '" >' . $menu_tree['content'] . '</ul>';
      // Wrapper for main UL
      if (!empty($mulwrapper) && strpos($mulwrapper, ',') !== FALSE) {
        $mulw = explode(',', $mulwrapper);
        // In case you just wanted to add something after the element.
        if (drupal_substr($mulwrapper, 0) == ',') {
          array_unshift($mulw, '');
        }
        $output['content'] = $mulw[0] . $output['content'] . $mulw[1];
      }
    }
  }
  return $output;
}